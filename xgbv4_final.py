# -*- coding: utf-8 -*-
"""XGBV4_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5NOI1eb2vdDTJrvhOozg37ll1CL6dVH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xg 
from xgboost import plot_importance, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing
from matplotlib import rcParams
from cycler import cycler
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score, KFold
from matplotlib.pyplot import figure

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

df = pd.read_csv('drive/My Drive/AIRGAS/Superstore3.csv')

df = df.drop("Unnamed: 0" , axis = 1)
df = df.drop('Row_ID', axis = 1)
df = df.drop("Ship_Date", axis =1)

df.set_index('Order_Date')

test_size = 1998

df_train = df[:-test_size]
df_test = df[-test_size:]

def create_features(df, label=None):
    df['Product_ID'] = df.index
    df['Month'] = df.Month
    df['Day'] = df.Day
    df['Year'] = df.Year
    df['Region'] = df.Region
    df['Ship_Mode'] = df.Ship_Mode
    df['Segment'] = df.Segment
    df['Country'] = df.Country
    df['City'] = df.City
    df['State'] = df.State
    df['Sales'] = df.Sales
    df['Profit'] = df.Profit
    df['Customer_ID'] = df.Customer_ID

    X = df[['Day','Month','Year', 'Sales', 'Profit', 'Region', 'Ship_Mode', 'Segment', 'Country', 'City', 'State', 'Customer_ID']]
    if label:
        y = df[label]
        return X, y
    return X

X_train, y_train = create_features(df_train, label='Sales')
X_test, y_test = create_features(df_test, label='Sales')

dtrain = xg.DMatrix(X_train, label=y_train)
dtest = xg.DMatrix(X_test, label=y_test)

params = {
    'max_depth':6,
    'min_child_weight': 1,
    'eta':.3,
    'subsample': 1,
    'colsample_bytree': 1,
    'objective':'reg:squarederror',
    'n_estimators':150,
    'reg_lambda':1,
    'gamma':.1
}

params['eval_metric'] = "rmse"

num_boost_round = 999

reg = xg.train(
    params,
    dtrain,
    num_boost_round=num_boost_round,
    evals=[(dtest, "Sales")],
    early_stopping_rounds=50
)

df_test['Sales_Prediction'] = reg.predict(dtest)

results = df_test

print("Mean Squared Error:",mean_squared_error(df_test.Sales_Prediction, df_test.Sales))

print("Mean Absolute Error:",mean_absolute_error(df_test.Sales_Prediction, df_test.Sales))

plt.figure(figsize=(80, 15))
plt.plot(results.Order_Date, results.Sales, label = "True Sales")
plt.plot(results.Order_Date, results.Sales_Prediction, label = "Predicted Sales")
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Sales Prediction vs True')
plt.legend()
plt.xticks(rotation = 45)
plt.show()

results

hold = pd.read_csv("drive/My Drive/AIRGAS/Superstore2.csv")

hold = hold.tail(1998)

df['Region'] = lbl.fit_transform(df['Region'].astype(str))
df['Product_ID'] = lbl.fit_transform(df['Product_ID'].astype(str))
df['Ship_Mode'] = lbl.fit_transform(df['Ship_Mode'].astype(str))
df['Customer_ID'] = lbl.fit_transform(df['Customer_ID'].astype(str))
df['Segment'] = lbl.fit_transform(df['Segment'].astype(str))
df['Country'] = lbl.fit_transform(df['Country'].astype(str))
df['City'] = lbl.fit_transform(df['City'].astype(str))
df['State'] = lbl.fit_transform(df['State'].astype(str))
df['Order_ID'] = lbl.fit_transform(df['Order_ID'].astype(str))
df['Customer_Name'] = lbl.fit_transform(df['Customer_Name'].astype(str))
df['Category'] = lbl.fit_transform(df['Category'].astype(str))
df['Sub-Category'] = lbl.fit_transform(df['Sub-Category'].astype(str))
df['Product_Name'] = lbl.fit_transform(df['Product_Name'].astype(str))

results['Ship_Mode'] = hold['Ship Mode']
results['Customer_ID'] = hold['Customer ID']
results['Customer_Name'] = hold['Customer Name']
results['Segment'] = hold['Segment']
results['Country'] = hold['Country']
results['City'] = hold['City']
results['State'] = hold['State']
results['Region'] = hold['Region']
results['Product_ID'] = hold['Product ID']
results['Order_ID'] = hold['Order ID']
results['Category'] = hold['Category']
results['Sub-Category'] = hold['Sub-Category']
results['Product_Name'] = hold['Product Name']

results.set_index('Product_Name')